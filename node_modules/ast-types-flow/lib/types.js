/**
 * @flow
 */

'use strict';

/*
 * Flow types for the Babylon AST.
 */

// Abstract types. Something must extend these.

export type Comment = {
  type: 'CommentLine',
  _CommentLine?: void,
  value: string,
  end: number,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
} | {
  type: 'CommentBlock',
  _CommentBlock?: void,
  value: string,
  end: number,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
};

export type Declaration = {
  type: 'ClassBody',
  _ClassBody?: void,
  body: Array<Node>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'ClassDeclaration',
  _ClassDeclaration?: void,
  body: ClassBody,
  id: ?Identifier,
  superClass: ?Expression,
  decorators: any,
  superTypeParameters: any,
  typeParameters: any,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'FunctionDeclaration',
  _FunctionDeclaration?: void,
  body: BlockStatement,
  id: Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
  async: boolean,
  defaults: Array<?Expression>,
  expression: boolean,
  generator: boolean,
  params: Array<Pattern>,
  rest: ?Identifier,
  returnType: ?TypeAnnotation,
  typeParameters: ?TypeParameterDeclaration,
} | {
  type: 'MethodDefinition',
  _MethodDefinition?: void,
  computed: boolean,
  key: Node,
  kind: 'constructor' | 'method' | 'get' | 'set',
  static: boolean,
  value: FunctionExpression,
  decorators: ?Array<Decorator>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'VariableDeclaration',
  _VariableDeclaration?: void,
  declarations: Array<VariableDeclarator>,
  kind: 'var' | 'let' | 'const',
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'ClassProperty',
  _ClassProperty?: void,
  computed: boolean,
  key: Node,
  static: boolean,
  typeAnnotation: ?TypeAnnotation,
  value: ?Expression,
  decorators: Array<Decorator>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
};

export type Expression = {
  type: 'ArrayExpression',
  _ArrayExpression?: void,
  elements: Array<?Node>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'AssignmentExpression',
  _AssignmentExpression?: void,
  left: Pattern,
  operator: AssignmentOperator,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'AwaitExpression',
  _AwaitExpression?: void,
  all: boolean,
  argument: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'BinaryExpression',
  _BinaryExpression?: void,
  left: Expression,
  operator: BinaryOperator,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'BindExpression',
  _BindExpression?: void,
  callee: Node,
  object: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'CallExpression',
  _CallExpression?: void,
  arguments: Array<Node>,
  callee: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'ClassExpression',
  _ClassExpression?: void,
  body: ClassBody,
  id: ?Identifier,
  superClass: ?Expression,
  decorators: any,
  superTypeParameters: any,
  typeParameters: any,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'ComprehensionExpression',
  _ComprehensionExpression?: void,
  body: Expression,
  blocks: Array<ComprehensionBlock>,
  filter: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'ConditionalExpression',
  _ConditionalExpression?: void,
  alternate: Expression,
  consequent: Expression,
  test: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'DoExpression',
  _DoExpression?: void,
  body: Statement,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'FunctionExpression',
  _FunctionExpression?: void,
  body: BlockStatement,
  id: ?Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
  async: boolean,
  defaults: Array<?Expression>,
  expression: boolean,
  generator: boolean,
  params: Array<Pattern>,
  rest: ?Identifier,
  returnType: ?TypeAnnotation,
  typeParameters: ?TypeParameterDeclaration,
} | {
  type: 'Identifier',
  _Identifier?: void,
  name: string,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'Literal',
  _Literal?: void,
  raw: string,
  regex: ?{pattern: string, flags: string},
  value: ?(string | boolean | number | RegExp),
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'LogicalExpression',
  _LogicalExpression?: void,
  left: Expression,
  operator: LogicalOperator,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'MemberExpression',
  _MemberExpression?: void,
  computed: boolean,
  object: Expression,
  property: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'NewExpression',
  _NewExpression?: void,
  arguments: Array<Node>,
  callee: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'ObjectExpression',
  _ObjectExpression?: void,
  properties: Array<Node>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'SequenceExpression',
  _SequenceExpression?: void,
  expression: Array<Expression>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'TaggedTemplateExpression',
  _TaggedTemplateExpression?: void,
  quasi: TemplateLiteral,
  tag: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'TemplateLiteral',
  _TemplateLiteral?: void,
  expressions: Array<Expression>,
  quasis: Array<TemplateElement>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'ThisExpression',
  _ThisExpression?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'UnaryExpression',
  _UnaryExpression?: void,
  argument: Expression,
  operator: UnaryOperator,
  prefix: true,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'UpdateExpression',
  _UpdateExpression?: void,
  argument: Expression,
  operator: UpdateOperator,
  prefix: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'YieldExpression',
  _YieldExpression?: void,
  argument: ?Expression,
  delegate: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'TypeCastExpression',
  _TypeCastExpression?: void,
  expression: Expression,
  typeAnnotation: TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'JSXElement',
  _JSXElement?: void,
  children: Array<Node>,
  closingElement: ?JSXClosingElement,
  openingElement: JSXOpeningElement,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'JSXEmptyExpression',
  _JSXEmptyExpression?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'JSXExpressionContainer',
  _JSXExpressionContainer?: void,
  expression: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'JSXMemberExpression',
  _JSXMemberExpression?: void,
  computed: boolean,
  object: Node,
  property: JSXIdentifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
};

export type Function = {
  type: 'ArrowFunctionExpression',
  _ArrowFunctionExpression?: void,
  body: Node,
  id: ?Identifier,
  end: number,
  innerComments: ?Array<Com